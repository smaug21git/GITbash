package com.ninza.hrm.api.projectTest;
import static io.restassured.RestAssured.*;

import java.io.IOException;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.Random;

import org.apache.commons.collections4.bag.SynchronizedSortedBag;
import org.hamcrest.Matchers;
import org.testng.Assert;
import org.testng.annotations.Test;
import com.mysql.cj.jdbc.Driver;
import com.ninza.hrm.api.GenericUtility.DataBaseUtility;
import com.ninza.hrm.api.GenericUtility.javaUtility;
import com.ninza.hrm.api.GenericUtility.propertyFileUtility;
import com.ninza.hrm.api.POJO.ProjectPOJO;
import com.ninza.hrm.contants.endpoints.IEndpoints;

import io.restassured.http.ContentType;
import io.restassured.response.Response;

public class CreateProject {
	
	ProjectPOJO pobj;
	propertyFileUtility pLib= new propertyFileUtility();
	javaUtility jLib= new javaUtility();
	DataBaseUtility dLib= new DataBaseUtility();
		
	@Test
	public static  void project() throws SQLException, IOException {
		
		String BASEURI = pLib.toReadDataFromPropertyFile("BASEUri");
		int rNo = jLib.togetRandomNumber();
		String projectName="Sanu_"+rNo;
		String expectedMsg = "Successfully Added";

		// creating an java object of pojo class
		pobj = new ProjectPOJO("orangee", "Created", 0, projectName);

		/* ==========verify the projectNAme in API layer========== */
		Response resp = given()
					.contentType(ContentType.JSON)
					.body(pobj)
				.when()
					.post(BASEURI+IEndpoints.ADD_Project);
				resp.then()
					.assertThat().statusCode(201)
					.assertThat().time(Matchers.lessThan(3000L))
					.assertThat().contentType(ContentType.JSON)
					.log().all();

		String actualMsg = resp.jsonPath().get("msg");
		Assert.assertEquals(expectedMsg, actualMsg);

		/* ==========verify the projectNAme in DB layer========== */
		
		
		dLib.getDbConnectionWithCredentials();
		boolean flag=dLib.executeQueryVerifyAndGetdata("select * from project", 4, projectName);
		Assert.assertTrue(flag,"project in db is not varified");
		
		dLib.closeDbConnection();
	}
	
	
	@Test(dependsOnMethods = "project")
			public void createDuplicateProjectTest() throws IOException {
				
		String BASEURI = pLib.toReadDataFromPropertyFile("BASEUri");
				
				given()
				.contentType(ContentType.JSON)
				.body(pobj)
			.when()
				.post(BASEURI+IEndpoints.ADD_Project)
			.then()
				.assertThat().statusCode(409)
				.log().all();
				
			}
	
	
	
	
	
	
	
	
	
	
	
	
	
}
